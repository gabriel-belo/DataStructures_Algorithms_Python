Problema- Rotação de uma lista


Obtido pela rotação de uma lista ordenada um número desconhecido de vezes escreva uma função para
determinar o número mínimo de vezes que a lista ordenada original foi rotacionada para obter a
lista fornecida. Sua função deve ter a complexidade do pior caso de O(lg n), onde n é o
comprimento da lista. Você pode assumir que todos os números na lista são únicos.

A definição de rotação de lista é remover o último elemento da lista e adicionar ele antes do
primeiro elemento. Exemplo: [3, 2, 4, 1] produz [1, 3 ,2 4].

Solução

1.Indique o problema de forma clara. Identificar o formato dos inputs e outputs:
Teremos inicialmente uma lista ordenada que irá sofrer rotações, rotações significam que o
último valor será apagado da lista e depois iremos adicioná-lo ao início da lista. Devemos
então descobrir o número mínimo de rotações para ter a lista rotacionada. A função deve ter
complexidade do pior caso O(log n), onde n é o comprimento da lista. Podemos assumir que todos os
números na lista estão ordenados.

O nosso input será uma lista de números.
Um exemplo de entrada é:
nums=[9, 12, 13, 2, 4, 5, 8]

O nosso output será a quantidade de rotações sofridas pela lista inicial, que é a lista com os
mesmo valores, porém ordenada. Então vamos receber um valor inteiro como resposta
No exemplo da entrada acima teremos um valor de saída: 3

Iniciando o algoritmo:

2. Gerar algumas entradas e saídas, tentar cobrir tidis is casos possíveis.
    1. Lista com 10 elementos e 4 rotações.
    2. Lista com n elemento e n-1 rotações, onde n é o tamanho da lista.
    3. Lista com 10 elementos e nehuma rotação.
    4. Lista vazia sem rotações.
    5. Lista com n elemento e n rotações, onde n é o tamanho da lista.
    6. Lista com um elemento.
    7. Lista com 1 rotação
    8. Lista com 8 elementos e 5 rotações.
    9. Lista que tem rotação iguala metade do tamanho da lista.

3. Gerar uma solução correta para o problema.
O primeiro objetivo sempre deve ser chegar a uma solução correta para o problema, que pode não ser o mais eficiente.
Uma solução possível é utiliando a busca linear onde iremos passar por todos os elementos até encontrar um elemento que seja menor que seu anterior e contar
a quantidade de valores até chegar nesse número, tendo assima quantidade de rotações, ou caso não encontre nenhum valor menor significa que temos duas opçõs:
não ocorreu rotação ou todos os números rotacionaram e a lista voltou para o seu padrão.

Paços:
1. Chamar a função com o parâmetro.
2. Criar uma variável contadora.
3. Iniciar um loop for com faixa do comprimento de nums.
4. Utilizar um if para verificar se achamos um valor menor que seu anterior, caso encontre retornamos o valor do contador.
5. Adicionar +1 ao contador toda vez que passarmos pelo if.
6. Caso não encontremos um número menor que seu anterior retornamos 0.

4. Implementar a solução

5. Analisar a complexidade do algoritmo e identificar ineficiências, caso existão.
A complexidade do algoritmo é O(n)

def count_rotations(nums):
    inicio= 0
    fim= len(nums)
    meio= (inicio + fim) //2


    if nums[meio] < nums[meio - 1]:
        rotacoes= meio
        return rotacoes

    elif

6. Aplicar téncincas para passar sobre as indeficiências. Repetir passos 3 a 6.

3. Gerar uma solução correta para o problema.
Podemos solucionar o problema utilizando busca binária, podendo assim aumentar a eficiência da aplicação. O problema principal para busca binária nesta
aplicação é dado o número central como decidir se é o menor número ou se a resposta está mentindo para esquerda ou direita.
Se o elemento central for menor que o elemento anterior então é o início da lista ordenada. Caso não seja será necessário fazer mais busca para encontrar
o valor.

Paços:
    1.
    2.
    3.

4.Implementar a solução
